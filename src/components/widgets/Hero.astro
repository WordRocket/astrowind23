---
import Image from '~/components/common/Image.astro';
import Button from '~/components/ui/Button.astro';

import type { Hero as Props } from '~/types';

const {
  title = await Astro.slots.render('title'),
  subtitle = await Astro.slots.render('subtitle'),
  tagline,

  content = await Astro.slots.render('content'),
  actions = await Astro.slots.render('actions'),
  image = await Astro.slots.render('image'),

  id,
  bg = await Astro.slots.render('bg'),
} = Astro.props;
---

<section class="relative md:-mt-[76px] not-prose" {...id ? { id } : {}}>
  <div class="absolute inset-0 pointer-events-none hero-bg bg-dot" aria-hidden="true">
    <slot name="bg">
      {bg ? <Fragment set:html={bg} /> : null}
    </slot>
    <!-- Animated background elements -->
    <div class="absolute top-20 left-10 w-32 h-32 bg-primary-500/10 rounded-full blur-xl animate-float"></div>
    <div class="absolute bottom-20 right-10 w-40 h-40 bg-secondary-500/10 rounded-full blur-xl animate-float" style="animation-delay: 1s;"></div>
    <div class="absolute top-1/2 left-1/2 w-24 h-24 bg-accent/10 rounded-full blur-xl animate-pulse-glow"></div>
  </div>
  <div class="relative max-w-7xl mx-auto px-4 sm:px-6 z-10">
    <div class="pt-0 md:pt-[76px] pointer-events-none"></div>
    <div class="py-12 md:py-20">
      <div class="text-center pb-10 md:pb-16 max-w-6xl mx-auto">
        {
          tagline && (
            <p
              class="text-sm font-semibold tracking-wider uppercase mb-4 intersect-once intersect-quarter motion-safe:opacity-0 motion-safe:intersect:animate-slide-up stagger-1"
              set:html={tagline}
            />
          )
        }
        {
          title && (
            <h1 
              class="hero-title text-white mb-6 font-heading intersect-once intersect-quarter motion-safe:opacity-0 motion-safe:intersect:animate-slide-up stagger-2"
              set:html={title}
            />
          )
        }
        <div class="max-w-3xl mx-auto">
          {
            subtitle && (
              <p
                class="text-xl text-slate-300 mb-8 leading-relaxed intersect-once intersect-quarter motion-safe:opacity-0 motion-safe:intersect:animate-slide-up stagger-3"
                set:html={subtitle}
              />
            )
          }
          {
            actions && (
              <div class="max-w-md m-auto flex flex-nowrap flex-col sm:flex-row sm:justify-center gap-4 intersect-once intersect-quarter motion-safe:opacity-0 motion-safe:intersect:animate-scale-in stagger-4">
                {Array.isArray(actions) ? (
                  actions.map((action) => (
                    <div class="flex w-full sm:w-auto">
                      <Button {...(action || {})} class="w-full sm:mb-0 btn-modern text-base px-8 py-4 font-semibold" />
                    </div>
                  ))
                ) : (
                  <Fragment set:html={actions} />
                )}
              </div>
            )
          }
        </div>
        {content && <Fragment set:html={content} />}
      </div>
      <div
        class="intersect-once intersect-no-queue intersect-quarter motion-safe:opacity-0 motion-safe:intersect:animate-slide-up stagger-5"
      >
        {
          image && (
            <div class="relative m-auto max-w-5xl">
              {typeof image === 'string' ? (
                <Fragment set:html={image} />
              ) : (
                <Image
                  class="mx-auto rounded-2xl w-full shadow-2xl border border-white/10 interactive-hover"
                  widths={[400, 768, 1024, 2040]}
                  sizes="(max-width: 767px) 400px, (max-width: 1023px) 768px, (max-width: 2039px) 1024px, 2040px"
                  loading="eager"
                  width={1024}
                  height={576}
                  {...image}
                />
              )}
            </div>
          )
        }
      </div>
    </div>
  </div>
</section>
